Parameters: 
  environment: 
    Type: String 
    Default: dev 
    AllowedValues: 
      - dev
      - prod 

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub '{{resolve:ssm:/${environment}/vpc/vpc_cidr}}'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
       - Key: name
         Value: development
         
  publicSubnet1: 
    Type: AWS::EC2::Subnet 
    Properties:
      AvailabilityZone: us-east-1a 
      CidrBlock: !Sub '{{resolve:ssm:/${environment}/vpc/public_subnet1_cidr}}'
      MapPublicIpOnLaunch: 'true' 
      VpcId: !Ref myVPC
      Tags:
       - Key: name
         Value: public subnet1 
     
  publicSubnet2: 
    Type: AWS::EC2::Subnet 
    Properties:
      AvailabilityZone: us-east-1b 
      CidrBlock: !Sub '{{resolve:ssm:/${environment}/vpc/public_subnet2_cidr}}'
      MapPublicIpOnLaunch: 'true' 
      VpcId: !Ref myVPC
      Tags:
       - Key: name
         Value: public subnet2
     
  privateSubnet1: 
    Type: AWS::EC2::Subnet 
    Properties:
      AvailabilityZone: us-east-1a 
      CidrBlock: !Sub '{{resolve:ssm:/${environment}/vpc/private_subnet1_cidr}}'
      MapPublicIpOnLaunch: 'true' 
      VpcId: !Ref myVPC
      Tags:
       - Key: name
         Value: private subnet1 
     
  privateSubnet2: 
    Type: AWS::EC2::Subnet 
    Properties:
      AvailabilityZone: us-east-1b 
      CidrBlock: !Sub '{{resolve:ssm:/${environment}/vpc/private_subnet2_cidr}}'
      MapPublicIpOnLaunch: 'true' 
      VpcId: !Ref myVPC
      Tags:
       - Key: name
         Value: private subnet2
     
  myIG: 
    Type: AWS::EC2::InternetGateway 
    Properties:
      Tags:
       - Key: name 
         Value: my internet gateway 
  
  attachIG:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref myIG 
      VpcId: !Ref myVPC 
      
  mainRouteTable: 
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref myVPC 
      
  mainOpenRoute:  
    Type: AWS::EC2::Route
    Properties: 
      RouteTableId: !Ref mainRouteTable
      DestinationCidrBlock: !Sub '{{resolve:ssm:/${environment}/vpc/open_cidr}}'
      GatewayId: !Ref myIG

  myPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref mainOpenRoute
      SubnetId: !Ref publicSubnet1

  myPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref mainOpenRoute
      SubnetId: !Ref publicSubnet2

Outputs:
  VpcId: 
    Value: !Ref myVPC
